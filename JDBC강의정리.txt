섹션1 JDBC의 이해============================================
[JDBC의 이해]
1. DB를 바꾸고 싶음 -> DB마다 연결 방법이 다름.
2. JDBC 표준 인터페이스가 만들어짐.
3. 각가 벤더에서 제공하는 자기의 DB에 연결 할 수 있도록 JDBC 드라이버 만들어서 제공함.(DB연결 라이브러리이다.)
4. 표준화의 한계 : 각각의 DB마다 SQL, 데이터 타입 등이 다르다. 대표적으로 페이징 처리방법이 있다.

[JDBC의 최신 데이터 접근 기술]
1. JDBC는 1997년 출시된 오래된 기술이고 구현 방법도 복잡하다. 그래서 SQL Mapper와 ORM 기술이 만들어짐
2. SQL Mapper의 장점
-> SQL 응답 결과를 객체로 편리하게 변환해준다.
-> JDBC의 반복되는 코드를 제거해준다.
3. SQL Mapper 단점
-> 개발자가 SQL을 직접 작성해야한다.
4. ORM 기술 : 객체를 관계형 데이터베이스 테이블과 매핑해주는 기술이다.
			 개발자가 반복적인 SQL을 직접 작성하지 않고 ORM기술이 개발자 대신 SQL을 동적으로 만들어 실행해주며
			 추가로 데이터베이스마다 다른 SQL을 사용하는 문제도 중간에서 해결해준다.
-> JAP, 하이버네이트, 이클립스링크
※ 모두 JDBC를 사용한다.


섹션2 커넥션 풀과 데이터 소스 이해============================================
[커넥션 풀 이해]
1. 로직 -> DB 드라이버 -> DB(TCP/IP연결) -> DB드라이버(응답받음) -> 커넥션 객체 응답
-> 매번 TCP/IP연결을 통해 커넥션을 생성하는 것은 응답 속도가 느리기에 사용자에게 안좋은 느낌을 준다.
2. 커넥션 풀 : 커넥션을 미리 만들어두고 관리한다. (모두 DB와 TCP/IP 연결되어있다)
(common-dbcp2, tomcat-jdbc pool, HikariCP)

[DataSource의 이해]
1. dbcp2도있고 HikariCP도 있다 커넥션을 획득하는 방법을 추상화 함으로써 로직의 변경이 없도록 함.
2. 핵심 기능은 커넥션 조회 하나이다. (JAVA에서 만든 인터페이스)
3. DriverManager는 DataSource를 사용하지 않는다. 따라서 DataSource 기반의 풀을 사용하려면 소스를 모두 수정해야된다.
-> 스프링에서는 이러한 문제를 해결하기위해 DriverManagerDataSource라는 DataSource를 구현한 클래스를 제공한다.


섹션4 스프링과 문제 해결 - 트랜잭션============================================
[문제점들]
1. MVC계층을 나눈 이유는 서비스 계층을 최대한 순수하게 유지하기 위한 목적이크다.

[트랜잭션 문제 해결 - 트랜잭션 매니저1]
1. DataSource 생성
2. PlatformTransactionManager 생성
3. getTransaction으로 커넥션을 생성해서 트랜잭션 동기화 매니저에 보관
4. 리포지토리에서 DataSourceUtils.getConnection()를 통해 트랜잭션 동기화 매니저에 커넥션을 가져와 작업 시작한다.

[트랜잭션 문제 해결 - 트랜잭션 AOP의 이해]
1. 프록시란? 대신 실행해주는 것

[트랜잭션 문제 해결 - 스프링 부트의 자동 리소스 등록 ]
1. 스프링부트에서 부터는 datasource, transcation 매니저를 따로 빈으로 등록 안해주면 자동으로 등록해줌.

[트랜잭션 문제 해결 - 정리 ]
1. 데이터 접근 기술을 바꾸게되면 트랜잭션 매니저도 변경하는 문제가 발생
-> PlatformTransactionManager에서 트랜잭션 매니저를 추상화함. (JDBC, JPA, 하이버네이트, 기타 트랜잭션 관리)
2. 트랜잭션템플릿(콜백패턴)을 사용했었지만 여전히 비지니스 로직에 실행로직이 있기에 스프링 프록시와 AOP를 이용하여 해결.
3. 실무에서는 선언적 트랜잭션 관리를 주로 사용. 프로그래밍 방식 트랜잭션 관리는 잘 사용하지 않음


섹션5 자바 예외 이해============================================
[언체크 예외 기본 이해]
1. 언체크 예외는 체크 예외와 기본적으로 동일하다. 차이가 있다면 던지는 throws를 선언하지 않고, 생략할 수 있다. 이 경우 자동으로 예외를 던진다.

